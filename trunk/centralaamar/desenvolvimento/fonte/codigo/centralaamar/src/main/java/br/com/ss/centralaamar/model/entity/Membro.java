package br.com.ss.centralaamar.model.entity;

// Generated 02/12/2012 11:09:42 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import lombok.Getter;
import lombok.Setter;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.validator.constraints.Email;

/**
 * Membro generated by hbm2java
 */
@Entity
@Table(name = "membro", catalog = "centralaamar")
public class Membro  extends AbstractEntity implements java.io.Serializable {

	
	// TODO campos nao mapeados..
	
	private static final long serialVersionUID = -1291295231738443097L;
	
	@Getter @Setter
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "mem_id", unique = true, nullable = false)
	private Long idMembro;

	@Getter @Setter
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "pro_id", referencedColumnName = "pro_id")
	private Profissao profissao;

	@Getter @Setter
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "peq_id", referencedColumnName = "peq_id")
	private PequenoGrupo pequenoGrupo;

	@Getter @Setter
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "past_id", referencedColumnName = "past_id")
	private Pastor pastor;

	@Getter @Setter
	@OneToMany(mappedBy = "membro", fetch = FetchType.LAZY)
	@Fetch(FetchMode.SELECT)
	@Cascade(CascadeType.SAVE_UPDATE)
	private List<Chamada> chamadas = new ArrayList<Chamada>();

	@Getter @Setter
	@Column(name = "nome", nullable = false, length = 60)
	private String nome;
	
	@Getter @Setter
	@Column(name = "endereco", length = 60)
	private String endereco;
	
	@Getter @Setter
	@Column(name = "bairro", length = 30)
	private String bairro;
	
	@Getter @Setter
	@Column(name = "celular", length = 10)
	private String celular;
	
	@Getter @Setter
	@Column(name = "foneResidencial", length = 10)
	private String foneResidencial;
	
	@Getter @Setter
	@Column(name = "foneComercial", length = 10)
	private String foneComercial;
	
	@Getter @Setter
	@Column(name = "sexo", nullable = false, length = 1)
	private String sexo;
	
	@Getter @Setter
	@Column(name = "membroIgreja", nullable = false, length = 1)
	private String membroIgreja;
	
	@Getter @Setter
	@Temporal(TemporalType.DATE)
	@Column(name = "dataNascimento")
	private Date dataNascimento;
	
	@Getter @Setter
	private Date dataBatismo;
	
	@Getter @Setter
	@Column(name = "email", length = 60)
	@Email(message = "E-mail inválido!")
	private String email;
	
	@Getter @Setter
	private String batizado;
	
	@Getter @Setter
	private String temFilho;
	
	@Getter @Setter
	private String modoConversao;
	
	@Getter @Setter
	private int membrosBatizadoFamilia;
	
	@Getter @Setter
	private String pai;
	
	@Getter @Setter
	private String mae;
	
	@Getter @Setter
	private String amigoContato;
	
	@Column(name = "interesse", length = 30)
	private String interesse;

	public Membro() {
	}

	public Membro(String nome, String endereco, String bairro, String sexo,
			String membroIgreja) {
		this.nome = nome;
		this.endereco = endereco;
		this.bairro = bairro;
		this.sexo = sexo;
		this.membroIgreja = membroIgreja;
	}

	public Membro(Profissao profissao, String nome, String endereco,
			String bairro, String celular, String foneResidencial,
			String foneComercial, String sexo, String membroIgreja,
			Date dataNacimento, String email) {
		this.profissao = profissao;
		this.nome = nome;
		this.endereco = endereco;
		this.bairro = bairro;
		this.celular = celular;
		this.foneResidencial = foneResidencial;
		this.foneComercial = foneComercial;
		this.sexo = sexo;
		this.membroIgreja = membroIgreja;
		this.dataNascimento = dataNacimento;
		this.email = email;
	}

	public Long getId() {
		return this.idMembro;
	}

	public List<Chamada> getChamadas() {
		return chamadas;
	}

	public void setChamadas(List<Chamada> chamadas) {
		this.chamadas = chamadas;
	}

}
